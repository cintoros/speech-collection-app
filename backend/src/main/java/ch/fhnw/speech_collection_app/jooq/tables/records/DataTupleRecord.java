/*
 * This file is generated by jOOQ.
 */
package ch.fhnw.speech_collection_app.jooq.tables.records;


import ch.fhnw.speech_collection_app.jooq.enums.DataTupleType;
import ch.fhnw.speech_collection_app.jooq.tables.DataTuple;

import javax.validation.constraints.NotNull;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record8;
import org.jooq.Row8;
import org.jooq.impl.UpdatableRecordImpl;


@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DataTupleRecord extends UpdatableRecordImpl<DataTupleRecord> implements Record8<Long, Long, Long, DataTupleType, Boolean, Long, Long, Long> {

    private static final long serialVersionUID = 1504678053;

    public void setId(Long value) {
        set(0, value);
    }

    public Long getId() {
        return (Long) get(0);
    }

    public void setDataElementId_1(Long value) {
        set(1, value);
    }

    @NotNull
    public Long getDataElementId_1() {
        return (Long) get(1);
    }

    public void setDataElementId_2(Long value) {
        set(2, value);
    }

    @NotNull
    public Long getDataElementId_2() {
        return (Long) get(2);
    }

    public void setType(DataTupleType value) {
        set(3, value);
    }

    public DataTupleType getType() {
        return (DataTupleType) get(3);
    }

    public void setFinished(Boolean value) {
        set(4, value);
    }

    public Boolean getFinished() {
        return (Boolean) get(4);
    }

    public void setCorrect(Long value) {
        set(5, value);
    }

    public Long getCorrect() {
        return (Long) get(5);
    }

    public void setWrong(Long value) {
        set(6, value);
    }

    public Long getWrong() {
        return (Long) get(6);
    }

    public void setSkipped(Long value) {
        set(7, value);
    }

    public Long getSkipped() {
        return (Long) get(7);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record8 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row8<Long, Long, Long, DataTupleType, Boolean, Long, Long, Long> fieldsRow() {
        return (Row8) super.fieldsRow();
    }

    @Override
    public Row8<Long, Long, Long, DataTupleType, Boolean, Long, Long, Long> valuesRow() {
        return (Row8) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return DataTuple.DATA_TUPLE.ID;
    }

    @Override
    public Field<Long> field2() {
        return DataTuple.DATA_TUPLE.DATA_ELEMENT_ID_1;
    }

    @Override
    public Field<Long> field3() {
        return DataTuple.DATA_TUPLE.DATA_ELEMENT_ID_2;
    }

    @Override
    public Field<DataTupleType> field4() {
        return DataTuple.DATA_TUPLE.TYPE;
    }

    @Override
    public Field<Boolean> field5() {
        return DataTuple.DATA_TUPLE.FINISHED;
    }

    @Override
    public Field<Long> field6() {
        return DataTuple.DATA_TUPLE.CORRECT;
    }

    @Override
    public Field<Long> field7() {
        return DataTuple.DATA_TUPLE.WRONG;
    }

    @Override
    public Field<Long> field8() {
        return DataTuple.DATA_TUPLE.SKIPPED;
    }

    @Override
    public Long component1() {
        return getId();
    }

    @Override
    public Long component2() {
        return getDataElementId_1();
    }

    @Override
    public Long component3() {
        return getDataElementId_2();
    }

    @Override
    public DataTupleType component4() {
        return getType();
    }

    @Override
    public Boolean component5() {
        return getFinished();
    }

    @Override
    public Long component6() {
        return getCorrect();
    }

    @Override
    public Long component7() {
        return getWrong();
    }

    @Override
    public Long component8() {
        return getSkipped();
    }

    @Override
    public Long value1() {
        return getId();
    }

    @Override
    public Long value2() {
        return getDataElementId_1();
    }

    @Override
    public Long value3() {
        return getDataElementId_2();
    }

    @Override
    public DataTupleType value4() {
        return getType();
    }

    @Override
    public Boolean value5() {
        return getFinished();
    }

    @Override
    public Long value6() {
        return getCorrect();
    }

    @Override
    public Long value7() {
        return getWrong();
    }

    @Override
    public Long value8() {
        return getSkipped();
    }

    @Override
    public DataTupleRecord value1(Long value) {
        setId(value);
        return this;
    }

    @Override
    public DataTupleRecord value2(Long value) {
        setDataElementId_1(value);
        return this;
    }

    @Override
    public DataTupleRecord value3(Long value) {
        setDataElementId_2(value);
        return this;
    }

    @Override
    public DataTupleRecord value4(DataTupleType value) {
        setType(value);
        return this;
    }

    @Override
    public DataTupleRecord value5(Boolean value) {
        setFinished(value);
        return this;
    }

    @Override
    public DataTupleRecord value6(Long value) {
        setCorrect(value);
        return this;
    }

    @Override
    public DataTupleRecord value7(Long value) {
        setWrong(value);
        return this;
    }

    @Override
    public DataTupleRecord value8(Long value) {
        setSkipped(value);
        return this;
    }

    @Override
    public DataTupleRecord values(Long value1, Long value2, Long value3, DataTupleType value4, Boolean value5, Long value6, Long value7, Long value8) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    public DataTupleRecord() {
        super(DataTuple.DATA_TUPLE);
    }

    public DataTupleRecord(Long id, Long dataElementId_1, Long dataElementId_2, DataTupleType type, Boolean finished, Long correct, Long wrong, Long skipped) {
        super(DataTuple.DATA_TUPLE);

        set(0, id);
        set(1, dataElementId_1);
        set(2, dataElementId_2);
        set(3, type);
        set(4, finished);
        set(5, correct);
        set(6, wrong);
        set(7, skipped);
    }
}
