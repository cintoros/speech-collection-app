/*
 * This file is generated by jOOQ.
 */
package ch.fhnw.speech_collection_app.jooq.tables;


import ch.fhnw.speech_collection_app.jooq.Indexes;
import ch.fhnw.speech_collection_app.jooq.Keys;
import ch.fhnw.speech_collection_app.jooq.SpeechCollectionApp;
import ch.fhnw.speech_collection_app.jooq.tables.records.ImageRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Image extends TableImpl<ImageRecord> {

    private static final long serialVersionUID = 680588930;

    public static final Image IMAGE = new Image();

    @Override
    public Class<ImageRecord> getRecordType() {
        return ImageRecord.class;
    }

    public final TableField<ImageRecord, Long> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    public final TableField<ImageRecord, Long> DATA_ELEMENT_ID = createField(DSL.name("data_element_id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    public final TableField<ImageRecord, String> PATH = createField(DSL.name("path"), org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    public final TableField<ImageRecord, String> LICENCE = createField(DSL.name("licence"), org.jooq.impl.SQLDataType.CLOB.defaultValue(org.jooq.impl.DSL.inline("NULL", org.jooq.impl.SQLDataType.CLOB)), this, "");

    public Image() {
        this(DSL.name("image"), null);
    }

    public Image(String alias) {
        this(DSL.name(alias), IMAGE);
    }

    public Image(Name alias) {
        this(alias, IMAGE);
    }

    private Image(Name alias, Table<ImageRecord> aliased) {
        this(alias, aliased, null);
    }

    private Image(Name alias, Table<ImageRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Image(Table<O> child, ForeignKey<O, ImageRecord> key) {
        super(child, key, IMAGE);
    }

    @Override
    public Schema getSchema() {
        return SpeechCollectionApp.SPEECH_COLLECTION_APP;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.IMAGE_DATA_ELEMENT_ID);
    }

    @Override
    public Identity<ImageRecord, Long> getIdentity() {
        return Keys.IDENTITY_IMAGE;
    }

    @Override
    public UniqueKey<ImageRecord> getPrimaryKey() {
        return Keys.KEY_IMAGE_PRIMARY;
    }

    @Override
    public List<UniqueKey<ImageRecord>> getKeys() {
        return Arrays.<UniqueKey<ImageRecord>>asList(Keys.KEY_IMAGE_PRIMARY);
    }

    @Override
    public List<ForeignKey<ImageRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<ImageRecord, ?>>asList(Keys.IMAGE_IBFK_1);
    }

    public DataElement dataElement() {
        return new DataElement(this, Keys.IMAGE_IBFK_1);
    }

    @Override
    public Image as(String alias) {
        return new Image(DSL.name(alias), this);
    }

    @Override
    public Image as(Name alias) {
        return new Image(alias, this);
    }

    @Override
    public Image rename(String name) {
        return new Image(DSL.name(name), null);
    }

    @Override
    public Image rename(Name name) {
        return new Image(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Long, Long, String, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
