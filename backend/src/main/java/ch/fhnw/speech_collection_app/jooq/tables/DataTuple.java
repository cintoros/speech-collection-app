/*
 * This file is generated by jOOQ.
 */
package ch.fhnw.speech_collection_app.jooq.tables;


import ch.fhnw.speech_collection_app.jooq.Indexes;
import ch.fhnw.speech_collection_app.jooq.Keys;
import ch.fhnw.speech_collection_app.jooq.SpeechCollectionApp;
import ch.fhnw.speech_collection_app.jooq.enums.DataTupleType;
import ch.fhnw.speech_collection_app.jooq.tables.records.DataTupleRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DataTuple extends TableImpl<DataTupleRecord> {

    private static final long serialVersionUID = 1771598262;

    public static final DataTuple DATA_TUPLE = new DataTuple();

    @Override
    public Class<DataTupleRecord> getRecordType() {
        return DataTupleRecord.class;
    }

    public final TableField<DataTupleRecord, Long> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    public final TableField<DataTupleRecord, Long> DATA_ELEMENT_ID_1 = createField(DSL.name("data_element_id_1"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    public final TableField<DataTupleRecord, Long> DATA_ELEMENT_ID_2 = createField(DSL.name("data_element_id_2"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    public final TableField<DataTupleRecord, DataTupleType> TYPE = createField(DSL.name("type"), org.jooq.impl.SQLDataType.VARCHAR(11).defaultValue(org.jooq.impl.DSL.inline("NULL", org.jooq.impl.SQLDataType.VARCHAR)).asEnumDataType(ch.fhnw.speech_collection_app.jooq.enums.DataTupleType.class), this, "");

    public final TableField<DataTupleRecord, Boolean> FINISHED = createField(DSL.name("finished"), org.jooq.impl.SQLDataType.BOOLEAN.defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.BOOLEAN)), this, "");

    public final TableField<DataTupleRecord, Long> CORRECT = createField(DSL.name("correct"), org.jooq.impl.SQLDataType.BIGINT.defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    public final TableField<DataTupleRecord, Long> WRONG = createField(DSL.name("wrong"), org.jooq.impl.SQLDataType.BIGINT.defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    public final TableField<DataTupleRecord, Long> SKIPPED = createField(DSL.name("skipped"), org.jooq.impl.SQLDataType.BIGINT.defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    public DataTuple() {
        this(DSL.name("data_tuple"), null);
    }

    public DataTuple(String alias) {
        this(DSL.name(alias), DATA_TUPLE);
    }

    public DataTuple(Name alias) {
        this(alias, DATA_TUPLE);
    }

    private DataTuple(Name alias, Table<DataTupleRecord> aliased) {
        this(alias, aliased, null);
    }

    private DataTuple(Name alias, Table<DataTupleRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("this table is used to save the audio,text, images data_tuples.\nthe type describes which foreign keys are set i.e TEXT_AUDIO(text_1,audio_2),IMAGE_AUDIO(image_1,audio_2).\nthe finished can be used to flag an data_element should not be checked at all."));
    }

    public <O extends Record> DataTuple(Table<O> child, ForeignKey<O, DataTupleRecord> key) {
        super(child, key, DATA_TUPLE);
    }

    @Override
    public Schema getSchema() {
        return SpeechCollectionApp.SPEECH_COLLECTION_APP;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.DATA_TUPLE_DATA_ELEMENT_ID_1, Indexes.DATA_TUPLE_DATA_ELEMENT_ID_2, Indexes.DATA_TUPLE_PRIMARY);
    }

    @Override
    public Identity<DataTupleRecord, Long> getIdentity() {
        return Keys.IDENTITY_DATA_TUPLE;
    }

    @Override
    public UniqueKey<DataTupleRecord> getPrimaryKey() {
        return Keys.KEY_DATA_TUPLE_PRIMARY;
    }

    @Override
    public List<UniqueKey<DataTupleRecord>> getKeys() {
        return Arrays.<UniqueKey<DataTupleRecord>>asList(Keys.KEY_DATA_TUPLE_PRIMARY);
    }

    @Override
    public List<ForeignKey<DataTupleRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<DataTupleRecord, ?>>asList(Keys.DATA_TUPLE_IBFK_1, Keys.DATA_TUPLE_IBFK_2);
    }

    public DataElement dataTupleIbfk_1() {
        return new DataElement(this, Keys.DATA_TUPLE_IBFK_1);
    }

    public DataElement dataTupleIbfk_2() {
        return new DataElement(this, Keys.DATA_TUPLE_IBFK_2);
    }

    @Override
    public DataTuple as(String alias) {
        return new DataTuple(DSL.name(alias), this);
    }

    @Override
    public DataTuple as(Name alias) {
        return new DataTuple(alias, this);
    }

    @Override
    public DataTuple rename(String name) {
        return new DataTuple(DSL.name(name), null);
    }

    @Override
    public DataTuple rename(Name name) {
        return new DataTuple(name, null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<Long, Long, Long, DataTupleType, Boolean, Long, Long, Long> fieldsRow() {
        return (Row8) super.fieldsRow();
    }
}
