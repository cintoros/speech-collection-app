/*
 * This file is generated by jOOQ.
 */
package ch.fhnw.speech_collection_app.jooq.tables;


import ch.fhnw.speech_collection_app.jooq.Keys;
import ch.fhnw.speech_collection_app.jooq.SpeechCollectionApp;
import ch.fhnw.speech_collection_app.jooq.tables.records.DomainRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Domain extends TableImpl<DomainRecord> {

    private static final long serialVersionUID = -95917101;

    public static final Domain DOMAIN = new Domain();

    @Override
    public Class<DomainRecord> getRecordType() {
        return DomainRecord.class;
    }

    public final TableField<DomainRecord, Long> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    public final TableField<DomainRecord, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    public Domain() {
        this(DSL.name("domain"), null);
    }

    public Domain(String alias) {
        this(DSL.name(alias), DOMAIN);
    }

    public Domain(Name alias) {
        this(alias, DOMAIN);
    }

    private Domain(Name alias, Table<DomainRecord> aliased) {
        this(alias, aliased, null);
    }

    private Domain(Name alias, Table<DomainRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Domain(Table<O> child, ForeignKey<O, DomainRecord> key) {
        super(child, key, DOMAIN);
    }

    @Override
    public Schema getSchema() {
        return SpeechCollectionApp.SPEECH_COLLECTION_APP;
    }

    @Override
    public Identity<DomainRecord, Long> getIdentity() {
        return Keys.IDENTITY_DOMAIN;
    }

    @Override
    public UniqueKey<DomainRecord> getPrimaryKey() {
        return Keys.KEY_DOMAIN_PRIMARY;
    }

    @Override
    public List<UniqueKey<DomainRecord>> getKeys() {
        return Arrays.<UniqueKey<DomainRecord>>asList(Keys.KEY_DOMAIN_PRIMARY);
    }

    @Override
    public Domain as(String alias) {
        return new Domain(DSL.name(alias), this);
    }

    @Override
    public Domain as(Name alias) {
        return new Domain(alias, this);
    }

    @Override
    public Domain rename(String name) {
        return new Domain(DSL.name(name), null);
    }

    @Override
    public Domain rename(Name name) {
        return new Domain(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Long, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
