/*
 * This file is generated by jOOQ.
 */
package ch.fhnw.speech_collection_app.jooq.tables;


import ch.fhnw.speech_collection_app.jooq.Indexes;
import ch.fhnw.speech_collection_app.jooq.Keys;
import ch.fhnw.speech_collection_app.jooq.SpeechCollectionApp;
import ch.fhnw.speech_collection_app.jooq.tables.records.SourceRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import org.jooq.Check;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row10;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.TableImpl;


@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Source extends TableImpl<SourceRecord> {

    private static final long serialVersionUID = -32360772;

    public static final Source SOURCE = new Source();

    @Override
    public Class<SourceRecord> getRecordType() {
        return SourceRecord.class;
    }

    public final TableField<SourceRecord, Long> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    public final TableField<SourceRecord, Long> USER_ID = createField(DSL.name("user_id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    public final TableField<SourceRecord, Long> DIALECT_ID = createField(DSL.name("dialect_id"), org.jooq.impl.SQLDataType.BIGINT.defaultValue(org.jooq.impl.DSL.inline("NULL", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    public final TableField<SourceRecord, Long> DOMAIN_ID = createField(DSL.name("domain_id"), org.jooq.impl.SQLDataType.BIGINT.defaultValue(org.jooq.impl.DSL.inline("NULL", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    public final TableField<SourceRecord, Long> USER_GROUP_ID = createField(DSL.name("user_group_id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    public final TableField<SourceRecord, Timestamp> CREATED_TIME = createField(DSL.name("created_time"), org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("current_timestamp()", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    public final TableField<SourceRecord, String> PATH_TO_RAW_FILE = createField(DSL.name("path_to_raw_file"), org.jooq.impl.SQLDataType.CLOB.defaultValue(org.jooq.impl.DSL.inline("NULL", org.jooq.impl.SQLDataType.CLOB)), this, "");

    public final TableField<SourceRecord, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.CLOB.defaultValue(org.jooq.impl.DSL.inline("NULL", org.jooq.impl.SQLDataType.CLOB)), this, "");

    public final TableField<SourceRecord, String> LICENCE = createField(DSL.name("licence"), org.jooq.impl.SQLDataType.CLOB.defaultValue(org.jooq.impl.DSL.inline("NULL", org.jooq.impl.SQLDataType.CLOB)), this, "");

    public final TableField<SourceRecord, String> META_INFORMATION = createField(DSL.name("meta_information"), org.jooq.impl.SQLDataType.CLOB.defaultValue(org.jooq.impl.DSL.inline("NULL", org.jooq.impl.SQLDataType.CLOB)), this, "contains meta_information that are different depending on the source etc.");

    public Source() {
        this(DSL.name("source"), null);
    }

    public Source(String alias) {
        this(DSL.name(alias), SOURCE);
    }

    public Source(Name alias) {
        this(alias, SOURCE);
    }

    private Source(Name alias, Table<SourceRecord> aliased) {
        this(alias, aliased, null);
    }

    private Source(Name alias, Table<SourceRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("a source can be generated based on something uploaded by the user i.e a text document.\nOr it can be imported by a script this is why most fields are optional."), TableOptions.table());
    }

    public <O extends Record> Source(Table<O> child, ForeignKey<O, SourceRecord> key) {
        super(child, key, SOURCE);
    }

    @Override
    public Schema getSchema() {
        return SpeechCollectionApp.SPEECH_COLLECTION_APP;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.SOURCE_DIALECT_ID, Indexes.SOURCE_DOMAIN_ID, Indexes.SOURCE_USER_GROUP_ID, Indexes.SOURCE_USER_ID);
    }

    @Override
    public Identity<SourceRecord, Long> getIdentity() {
        return Keys.IDENTITY_SOURCE;
    }

    @Override
    public UniqueKey<SourceRecord> getPrimaryKey() {
        return Keys.KEY_SOURCE_PRIMARY;
    }

    @Override
    public List<UniqueKey<SourceRecord>> getKeys() {
        return Arrays.<UniqueKey<SourceRecord>>asList(Keys.KEY_SOURCE_PRIMARY);
    }

    @Override
    public List<ForeignKey<SourceRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<SourceRecord, ?>>asList(Keys.SOURCE_IBFK_1, Keys.SOURCE_IBFK_2, Keys.SOURCE_IBFK_3, Keys.SOURCE_IBFK_4);
    }

    public User user() {
        return new User(this, Keys.SOURCE_IBFK_1);
    }

    public Dialect dialect() {
        return new Dialect(this, Keys.SOURCE_IBFK_2);
    }

    public Domain domain() {
        return new Domain(this, Keys.SOURCE_IBFK_3);
    }

    public UserGroup userGroup() {
        return new UserGroup(this, Keys.SOURCE_IBFK_4);
    }

    @Override
    public List<Check<SourceRecord>> getChecks() {
        return Arrays.<Check<SourceRecord>>asList(
              Internal.createCheck(this, DSL.name("meta_information"), "json_valid(`meta_information`)", true)
        );
    }

    @Override
    public Source as(String alias) {
        return new Source(DSL.name(alias), this);
    }

    @Override
    public Source as(Name alias) {
        return new Source(alias, this);
    }

    @Override
    public Source rename(String name) {
        return new Source(DSL.name(name), null);
    }

    @Override
    public Source rename(Name name) {
        return new Source(name, null);
    }

    // -------------------------------------------------------------------------
    // Row10 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row10<Long, Long, Long, Long, Long, Timestamp, String, String, String, String> fieldsRow() {
        return (Row10) super.fieldsRow();
    }
}
