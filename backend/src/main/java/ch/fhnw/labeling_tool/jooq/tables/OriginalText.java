/*
 * This file is generated by jOOQ.
 */
package ch.fhnw.labeling_tool.jooq.tables;


import ch.fhnw.labeling_tool.jooq.Indexes;
import ch.fhnw.labeling_tool.jooq.Keys;
import ch.fhnw.labeling_tool.jooq.LabelingTool;
import ch.fhnw.labeling_tool.jooq.tables.records.OriginalTextRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class OriginalText extends TableImpl<OriginalTextRecord> {

    private static final long serialVersionUID = -954009522;

    public static final OriginalText ORIGINAL_TEXT = new OriginalText();

    @Override
    public Class<OriginalTextRecord> getRecordType() {
        return OriginalTextRecord.class;
    }

    public final TableField<OriginalTextRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    public final TableField<OriginalTextRecord, Long> USER_GROUP_ID = createField("user_group_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    public final TableField<OriginalTextRecord, byte[]> ORIGINAL_TEXT_ = createField("original_text", org.jooq.impl.SQLDataType.BLOB.nullable(false), this, "");

    public final TableField<OriginalTextRecord, String> EXTRACTED_TEXT = createField("extracted_text", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    public OriginalText() {
        this(DSL.name("original_text"), null);
    }

    public OriginalText(String alias) {
        this(DSL.name(alias), ORIGINAL_TEXT);
    }

    public OriginalText(Name alias) {
        this(alias, ORIGINAL_TEXT);
    }

    private OriginalText(Name alias, Table<OriginalTextRecord> aliased) {
        this(alias, aliased, null);
    }

    private OriginalText(Name alias, Table<OriginalTextRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> OriginalText(Table<O> child, ForeignKey<O, OriginalTextRecord> key) {
        super(child, key, ORIGINAL_TEXT);
    }

    @Override
    public Schema getSchema() {
        return LabelingTool.LABELING_TOOL;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.ORIGINAL_TEXT_PRIMARY, Indexes.ORIGINAL_TEXT_USER_GROUP_ID);
    }

    @Override
    public Identity<OriginalTextRecord, Long> getIdentity() {
        return Keys.IDENTITY_ORIGINAL_TEXT;
    }

    @Override
    public UniqueKey<OriginalTextRecord> getPrimaryKey() {
        return Keys.KEY_ORIGINAL_TEXT_PRIMARY;
    }

    @Override
    public List<UniqueKey<OriginalTextRecord>> getKeys() {
        return Arrays.<UniqueKey<OriginalTextRecord>>asList(Keys.KEY_ORIGINAL_TEXT_PRIMARY);
    }

    @Override
    public List<ForeignKey<OriginalTextRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<OriginalTextRecord, ?>>asList(Keys.ORIGINAL_TEXT_IBFK_1);
    }

    public UserGroup userGroup() {
        return new UserGroup(this, Keys.ORIGINAL_TEXT_IBFK_1);
    }

    @Override
    public OriginalText as(String alias) {
        return new OriginalText(DSL.name(alias), this);
    }

    @Override
    public OriginalText as(Name alias) {
        return new OriginalText(alias, this);
    }

    @Override
    public OriginalText rename(String name) {
        return new OriginalText(DSL.name(name), null);
    }

    @Override
    public OriginalText rename(Name name) {
        return new OriginalText(name, null);
    }
}
