/*
 * This file is generated by jOOQ.
 */
package ch.fhnw.labeling_tool.jooq.tables;


import ch.fhnw.labeling_tool.jooq.Indexes;
import ch.fhnw.labeling_tool.jooq.Keys;
import ch.fhnw.labeling_tool.jooq.LabelingTool;
import ch.fhnw.labeling_tool.jooq.tables.records.UserAndTextAudioRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserAndTextAudio extends TableImpl<UserAndTextAudioRecord> {

    private static final long serialVersionUID = 587540100;

    public static final UserAndTextAudio USER_AND_TEXT_AUDIO = new UserAndTextAudio();

    @Override
    public Class<UserAndTextAudioRecord> getRecordType() {
        return UserAndTextAudioRecord.class;
    }

    public final TableField<UserAndTextAudioRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    public final TableField<UserAndTextAudioRecord, Long> USER_ID = createField("user_id", org.jooq.impl.SQLDataType.BIGINT.defaultValue(org.jooq.impl.DSL.inline("NULL", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    public final TableField<UserAndTextAudioRecord, Integer> TEXT_AUDIO_ID = createField("text_audio_id", org.jooq.impl.SQLDataType.INTEGER.defaultValue(org.jooq.impl.DSL.inline("NULL", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    public final TableField<UserAndTextAudioRecord, Timestamp> TIME = createField("time", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("current_timestamp()", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    public UserAndTextAudio() {
        this(DSL.name("user_and_text_audio"), null);
    }

    public UserAndTextAudio(String alias) {
        this(DSL.name(alias), USER_AND_TEXT_AUDIO);
    }

    public UserAndTextAudio(Name alias) {
        this(alias, USER_AND_TEXT_AUDIO);
    }

    private UserAndTextAudio(Name alias, Table<UserAndTextAudioRecord> aliased) {
        this(alias, aliased, null);
    }

    private UserAndTextAudio(Name alias, Table<UserAndTextAudioRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> UserAndTextAudio(Table<O> child, ForeignKey<O, UserAndTextAudioRecord> key) {
        super(child, key, USER_AND_TEXT_AUDIO);
    }

    @Override
    public Schema getSchema() {
        return LabelingTool.LABELING_TOOL;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.USER_AND_TEXT_AUDIO_PRIMARY, Indexes.USER_AND_TEXT_AUDIO_UNI);
    }

    @Override
    public Identity<UserAndTextAudioRecord, Long> getIdentity() {
        return Keys.IDENTITY_USER_AND_TEXT_AUDIO;
    }

    @Override
    public UniqueKey<UserAndTextAudioRecord> getPrimaryKey() {
        return Keys.KEY_USER_AND_TEXT_AUDIO_PRIMARY;
    }

    @Override
    public List<UniqueKey<UserAndTextAudioRecord>> getKeys() {
        return Arrays.<UniqueKey<UserAndTextAudioRecord>>asList(Keys.KEY_USER_AND_TEXT_AUDIO_PRIMARY, Keys.KEY_USER_AND_TEXT_AUDIO_UNI);
    }

    @Override
    public UserAndTextAudio as(String alias) {
        return new UserAndTextAudio(DSL.name(alias), this);
    }

    @Override
    public UserAndTextAudio as(Name alias) {
        return new UserAndTextAudio(alias, this);
    }

    @Override
    public UserAndTextAudio rename(String name) {
        return new UserAndTextAudio(DSL.name(name), null);
    }

    @Override
    public UserAndTextAudio rename(Name name) {
        return new UserAndTextAudio(name, null);
    }
}
