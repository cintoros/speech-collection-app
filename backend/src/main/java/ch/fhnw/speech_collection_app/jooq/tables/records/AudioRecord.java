/*
 * This file is generated by jOOQ.
 */
package ch.fhnw.speech_collection_app.jooq.tables.records;


import ch.fhnw.speech_collection_app.jooq.enums.AudioNoiseLevel;
import ch.fhnw.speech_collection_app.jooq.enums.AudioQuality;
import ch.fhnw.speech_collection_app.jooq.tables.Audio;

import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record10;
import org.jooq.Row10;
import org.jooq.impl.UpdatableRecordImpl;


@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AudioRecord extends UpdatableRecordImpl<AudioRecord> implements Record10<Long, Long, Long, String, AudioQuality, AudioNoiseLevel, String, Double, Double, Double> {

    private static final long serialVersionUID = -2047480478;

    public void setId(Long value) {
        set(0, value);
    }

    public Long getId() {
        return (Long) get(0);
    }

    public void setDialectId(Long value) {
        set(1, value);
    }

    @NotNull
    public Long getDialectId() {
        return (Long) get(1);
    }

    public void setDataElementId(Long value) {
        set(2, value);
    }

    @NotNull
    public Long getDataElementId() {
        return (Long) get(2);
    }

    public void setPath(String value) {
        set(3, value);
    }

    @NotNull
    @Size(max = 65535)
    public String getPath() {
        return (String) get(3);
    }

    public void setQuality(AudioQuality value) {
        set(4, value);
    }

    public AudioQuality getQuality() {
        return (AudioQuality) get(4);
    }

    public void setNoiseLevel(AudioNoiseLevel value) {
        set(5, value);
    }

    public AudioNoiseLevel getNoiseLevel() {
        return (AudioNoiseLevel) get(5);
    }

    public void setBrowserVersion(String value) {
        set(6, value);
    }

    @Size(max = 65535)
    public String getBrowserVersion() {
        return (String) get(6);
    }

    public void setAudioStart(Double value) {
        set(7, value);
    }

    public Double getAudioStart() {
        return (Double) get(7);
    }

    public void setAudioEnd(Double value) {
        set(8, value);
    }

    public Double getAudioEnd() {
        return (Double) get(8);
    }

    public void setDuration(Double value) {
        set(9, value);
    }

    public Double getDuration() {
        return (Double) get(9);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record10 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row10<Long, Long, Long, String, AudioQuality, AudioNoiseLevel, String, Double, Double, Double> fieldsRow() {
        return (Row10) super.fieldsRow();
    }

    @Override
    public Row10<Long, Long, Long, String, AudioQuality, AudioNoiseLevel, String, Double, Double, Double> valuesRow() {
        return (Row10) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return Audio.AUDIO.ID;
    }

    @Override
    public Field<Long> field2() {
        return Audio.AUDIO.DIALECT_ID;
    }

    @Override
    public Field<Long> field3() {
        return Audio.AUDIO.DATA_ELEMENT_ID;
    }

    @Override
    public Field<String> field4() {
        return Audio.AUDIO.PATH;
    }

    @Override
    public Field<AudioQuality> field5() {
        return Audio.AUDIO.QUALITY;
    }

    @Override
    public Field<AudioNoiseLevel> field6() {
        return Audio.AUDIO.NOISE_LEVEL;
    }

    @Override
    public Field<String> field7() {
        return Audio.AUDIO.BROWSER_VERSION;
    }

    @Override
    public Field<Double> field8() {
        return Audio.AUDIO.AUDIO_START;
    }

    @Override
    public Field<Double> field9() {
        return Audio.AUDIO.AUDIO_END;
    }

    @Override
    public Field<Double> field10() {
        return Audio.AUDIO.DURATION;
    }

    @Override
    public Long component1() {
        return getId();
    }

    @Override
    public Long component2() {
        return getDialectId();
    }

    @Override
    public Long component3() {
        return getDataElementId();
    }

    @Override
    public String component4() {
        return getPath();
    }

    @Override
    public AudioQuality component5() {
        return getQuality();
    }

    @Override
    public AudioNoiseLevel component6() {
        return getNoiseLevel();
    }

    @Override
    public String component7() {
        return getBrowserVersion();
    }

    @Override
    public Double component8() {
        return getAudioStart();
    }

    @Override
    public Double component9() {
        return getAudioEnd();
    }

    @Override
    public Double component10() {
        return getDuration();
    }

    @Override
    public Long value1() {
        return getId();
    }

    @Override
    public Long value2() {
        return getDialectId();
    }

    @Override
    public Long value3() {
        return getDataElementId();
    }

    @Override
    public String value4() {
        return getPath();
    }

    @Override
    public AudioQuality value5() {
        return getQuality();
    }

    @Override
    public AudioNoiseLevel value6() {
        return getNoiseLevel();
    }

    @Override
    public String value7() {
        return getBrowserVersion();
    }

    @Override
    public Double value8() {
        return getAudioStart();
    }

    @Override
    public Double value9() {
        return getAudioEnd();
    }

    @Override
    public Double value10() {
        return getDuration();
    }

    @Override
    public AudioRecord value1(Long value) {
        setId(value);
        return this;
    }

    @Override
    public AudioRecord value2(Long value) {
        setDialectId(value);
        return this;
    }

    @Override
    public AudioRecord value3(Long value) {
        setDataElementId(value);
        return this;
    }

    @Override
    public AudioRecord value4(String value) {
        setPath(value);
        return this;
    }

    @Override
    public AudioRecord value5(AudioQuality value) {
        setQuality(value);
        return this;
    }

    @Override
    public AudioRecord value6(AudioNoiseLevel value) {
        setNoiseLevel(value);
        return this;
    }

    @Override
    public AudioRecord value7(String value) {
        setBrowserVersion(value);
        return this;
    }

    @Override
    public AudioRecord value8(Double value) {
        setAudioStart(value);
        return this;
    }

    @Override
    public AudioRecord value9(Double value) {
        setAudioEnd(value);
        return this;
    }

    @Override
    public AudioRecord value10(Double value) {
        setDuration(value);
        return this;
    }

    @Override
    public AudioRecord values(Long value1, Long value2, Long value3, String value4, AudioQuality value5, AudioNoiseLevel value6, String value7, Double value8, Double value9, Double value10) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        value9(value9);
        value10(value10);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    public AudioRecord() {
        super(Audio.AUDIO);
    }

    public AudioRecord(Long id, Long dialectId, Long dataElementId, String path, AudioQuality quality, AudioNoiseLevel noiseLevel, String browserVersion, Double audioStart, Double audioEnd, Double duration) {
        super(Audio.AUDIO);

        set(0, id);
        set(1, dialectId);
        set(2, dataElementId);
        set(3, path);
        set(4, quality);
        set(5, noiseLevel);
        set(6, browserVersion);
        set(7, audioStart);
        set(8, audioEnd);
        set(9, duration);
    }
}
