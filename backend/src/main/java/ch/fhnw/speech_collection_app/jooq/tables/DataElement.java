/*
 * This file is generated by jOOQ.
 */
package ch.fhnw.speech_collection_app.jooq.tables;


import ch.fhnw.speech_collection_app.jooq.Indexes;
import ch.fhnw.speech_collection_app.jooq.Keys;
import ch.fhnw.speech_collection_app.jooq.SpeechCollectionApp;
import ch.fhnw.speech_collection_app.jooq.tables.records.DataElementRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DataElement extends TableImpl<DataElementRecord> {

    private static final long serialVersionUID = -1057701891;

    public static final DataElement DATA_ELEMENT = new DataElement();

    @Override
    public Class<DataElementRecord> getRecordType() {
        return DataElementRecord.class;
    }

    public final TableField<DataElementRecord, Long> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    public final TableField<DataElementRecord, Long> SOURCE_ID = createField(DSL.name("source_id"), org.jooq.impl.SQLDataType.BIGINT.defaultValue(org.jooq.impl.DSL.inline("NULL", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    public final TableField<DataElementRecord, Long> USER_ID = createField(DSL.name("user_id"), org.jooq.impl.SQLDataType.BIGINT.defaultValue(org.jooq.impl.DSL.inline("NULL", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    public final TableField<DataElementRecord, Long> USER_GROUP_ID = createField(DSL.name("user_group_id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    public final TableField<DataElementRecord, Timestamp> CREATED_TIME = createField(DSL.name("created_time"), org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("current_timestamp()", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    public final TableField<DataElementRecord, Boolean> FINISHED = createField(DSL.name("finished"), org.jooq.impl.SQLDataType.BOOLEAN.defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.BOOLEAN)), this, "");

    public final TableField<DataElementRecord, Boolean> IS_PRIVATE = createField(DSL.name("is_private"), org.jooq.impl.SQLDataType.BOOLEAN.defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.BOOLEAN)), this, "");

    public final TableField<DataElementRecord, Long> SKIPPED = createField(DSL.name("skipped"), org.jooq.impl.SQLDataType.BIGINT.defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    public DataElement() {
        this(DSL.name("data_element"), null);
    }

    public DataElement(String alias) {
        this(DSL.name(alias), DATA_ELEMENT);
    }

    public DataElement(Name alias) {
        this(alias, DATA_ELEMENT);
    }

    private DataElement(Name alias, Table<DataElementRecord> aliased) {
        this(alias, aliased, null);
    }

    private DataElement(Name alias, Table<DataElementRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("the data_element can be an audio,text or image.\nIn case of text & audio it can be uploaded normally or generated using a source i.e. transcript, text-document\nThe finished flag is used to prevent cycles like text=>recording=>text=>recording=>..."), TableOptions.table());
    }

    public <O extends Record> DataElement(Table<O> child, ForeignKey<O, DataElementRecord> key) {
        super(child, key, DATA_ELEMENT);
    }

    @Override
    public Schema getSchema() {
        return SpeechCollectionApp.SPEECH_COLLECTION_APP;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.DATA_ELEMENT_SOURCE_ID, Indexes.DATA_ELEMENT_USER_GROUP_ID, Indexes.DATA_ELEMENT_USER_ID);
    }

    @Override
    public Identity<DataElementRecord, Long> getIdentity() {
        return Keys.IDENTITY_DATA_ELEMENT;
    }

    @Override
    public UniqueKey<DataElementRecord> getPrimaryKey() {
        return Keys.KEY_DATA_ELEMENT_PRIMARY;
    }

    @Override
    public List<UniqueKey<DataElementRecord>> getKeys() {
        return Arrays.<UniqueKey<DataElementRecord>>asList(Keys.KEY_DATA_ELEMENT_PRIMARY);
    }

    @Override
    public List<ForeignKey<DataElementRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<DataElementRecord, ?>>asList(Keys.DATA_ELEMENT_IBFK_1, Keys.DATA_ELEMENT_IBFK_2, Keys.DATA_ELEMENT_IBFK_3);
    }

    public Source source() {
        return new Source(this, Keys.DATA_ELEMENT_IBFK_1);
    }

    public User user() {
        return new User(this, Keys.DATA_ELEMENT_IBFK_2);
    }

    public UserGroup userGroup() {
        return new UserGroup(this, Keys.DATA_ELEMENT_IBFK_3);
    }

    @Override
    public DataElement as(String alias) {
        return new DataElement(DSL.name(alias), this);
    }

    @Override
    public DataElement as(Name alias) {
        return new DataElement(alias, this);
    }

    @Override
    public DataElement rename(String name) {
        return new DataElement(DSL.name(name), null);
    }

    @Override
    public DataElement rename(Name name) {
        return new DataElement(name, null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<Long, Long, Long, Long, Timestamp, Boolean, Boolean, Long> fieldsRow() {
        return (Row8) super.fieldsRow();
    }
}
