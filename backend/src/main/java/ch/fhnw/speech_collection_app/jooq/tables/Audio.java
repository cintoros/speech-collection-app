/*
 * This file is generated by jOOQ.
 */
package ch.fhnw.speech_collection_app.jooq.tables;


import ch.fhnw.speech_collection_app.jooq.Indexes;
import ch.fhnw.speech_collection_app.jooq.Keys;
import ch.fhnw.speech_collection_app.jooq.SpeechCollectionApp;
import ch.fhnw.speech_collection_app.jooq.enums.AudioNoiseLevel;
import ch.fhnw.speech_collection_app.jooq.enums.AudioQuality;
import ch.fhnw.speech_collection_app.jooq.tables.records.AudioRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Audio extends TableImpl<AudioRecord> {

    private static final long serialVersionUID = 967711132;

    public static final Audio AUDIO = new Audio();

    @Override
    public Class<AudioRecord> getRecordType() {
        return AudioRecord.class;
    }

    public final TableField<AudioRecord, Long> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    public final TableField<AudioRecord, Long> DIALECT_ID = createField(DSL.name("dialect_id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    public final TableField<AudioRecord, Long> DATA_ELEMENT_ID = createField(DSL.name("data_element_id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    public final TableField<AudioRecord, String> PATH = createField(DSL.name("path"), org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    public final TableField<AudioRecord, AudioQuality> QUALITY = createField(DSL.name("quality"), org.jooq.impl.SQLDataType.VARCHAR(10).defaultValue(org.jooq.impl.DSL.inline("NULL", org.jooq.impl.SQLDataType.VARCHAR)).asEnumDataType(ch.fhnw.speech_collection_app.jooq.enums.AudioQuality.class), this, "");

    public final TableField<AudioRecord, AudioNoiseLevel> NOISE_LEVEL = createField(DSL.name("noise_level"), org.jooq.impl.SQLDataType.VARCHAR(14).defaultValue(org.jooq.impl.DSL.inline("NULL", org.jooq.impl.SQLDataType.VARCHAR)).asEnumDataType(ch.fhnw.speech_collection_app.jooq.enums.AudioNoiseLevel.class), this, "");

    public final TableField<AudioRecord, String> BROWSER_VERSION = createField(DSL.name("browser_version"), org.jooq.impl.SQLDataType.CLOB.defaultValue(org.jooq.impl.DSL.inline("NULL", org.jooq.impl.SQLDataType.CLOB)), this, "");

    public final TableField<AudioRecord, Double> AUDIO_START = createField(DSL.name("audio_start"), org.jooq.impl.SQLDataType.FLOAT.defaultValue(org.jooq.impl.DSL.inline("NULL", org.jooq.impl.SQLDataType.FLOAT)), this, "");

    public final TableField<AudioRecord, Double> AUDIO_END = createField(DSL.name("audio_end"), org.jooq.impl.SQLDataType.FLOAT.defaultValue(org.jooq.impl.DSL.inline("NULL", org.jooq.impl.SQLDataType.FLOAT)), this, "");

    public Audio() {
        this(DSL.name("audio"), null);
    }

    public Audio(String alias) {
        this(DSL.name(alias), AUDIO);
    }

    public Audio(Name alias) {
        this(alias, AUDIO);
    }

    private Audio(Name alias, Table<AudioRecord> aliased) {
        this(alias, aliased, null);
    }

    private Audio(Name alias, Table<AudioRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("the audio can be an recording or a extract from a transcipt/audiofile .\ndepending on this we have different meta data"));
    }

    public <O extends Record> Audio(Table<O> child, ForeignKey<O, AudioRecord> key) {
        super(child, key, AUDIO);
    }

    @Override
    public Schema getSchema() {
        return SpeechCollectionApp.SPEECH_COLLECTION_APP;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.AUDIO_DATA_ELEMENT_ID, Indexes.AUDIO_DIALECT_ID, Indexes.AUDIO_PRIMARY);
    }

    @Override
    public Identity<AudioRecord, Long> getIdentity() {
        return Keys.IDENTITY_AUDIO;
    }

    @Override
    public UniqueKey<AudioRecord> getPrimaryKey() {
        return Keys.KEY_AUDIO_PRIMARY;
    }

    @Override
    public List<UniqueKey<AudioRecord>> getKeys() {
        return Arrays.<UniqueKey<AudioRecord>>asList(Keys.KEY_AUDIO_PRIMARY);
    }

    @Override
    public List<ForeignKey<AudioRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<AudioRecord, ?>>asList(Keys.AUDIO_IBFK_1, Keys.AUDIO_IBFK_2);
    }

    public Dialect dialect() {
        return new Dialect(this, Keys.AUDIO_IBFK_1);
    }

    public DataElement dataElement() {
        return new DataElement(this, Keys.AUDIO_IBFK_2);
    }

    @Override
    public Audio as(String alias) {
        return new Audio(DSL.name(alias), this);
    }

    @Override
    public Audio as(Name alias) {
        return new Audio(alias, this);
    }

    @Override
    public Audio rename(String name) {
        return new Audio(DSL.name(name), null);
    }

    @Override
    public Audio rename(Name name) {
        return new Audio(name, null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<Long, Long, Long, String, AudioQuality, AudioNoiseLevel, String, Double, Double> fieldsRow() {
        return (Row9) super.fieldsRow();
    }
}
