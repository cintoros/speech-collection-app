/*
 * This file is generated by jOOQ.
 */
package ch.fhnw.labeling_tool.jooq.tables;


import ch.fhnw.labeling_tool.jooq.Indexes;
import ch.fhnw.labeling_tool.jooq.Keys;
import ch.fhnw.labeling_tool.jooq.LabelingTool;
import ch.fhnw.labeling_tool.jooq.enums.CheckedUtteranceLabel;
import ch.fhnw.labeling_tool.jooq.tables.records.CheckedUtteranceRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CheckedUtterance extends TableImpl<CheckedUtteranceRecord> {

    private static final long serialVersionUID = 500715296;

    public static final CheckedUtterance CHECKED_UTTERANCE = new CheckedUtterance();

    @Override
    public Class<CheckedUtteranceRecord> getRecordType() {
        return CheckedUtteranceRecord.class;
    }

    public final TableField<CheckedUtteranceRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    public final TableField<CheckedUtteranceRecord, Long> UTTERANCE_ID = createField("utterance_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    public final TableField<CheckedUtteranceRecord, Long> USER_ID = createField("user_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    public final TableField<CheckedUtteranceRecord, CheckedUtteranceLabel> LABEL = createField("label", org.jooq.impl.SQLDataType.VARCHAR(7).defaultValue(org.jooq.impl.DSL.inline("NULL", org.jooq.impl.SQLDataType.VARCHAR)).asEnumDataType(ch.fhnw.labeling_tool.jooq.enums.CheckedUtteranceLabel.class), this, "");

    public final TableField<CheckedUtteranceRecord, Timestamp> TIME = createField("time", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("current_timestamp()", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    public CheckedUtterance() {
        this(DSL.name("checked_utterance"), null);
    }

    public CheckedUtterance(String alias) {
        this(DSL.name(alias), CHECKED_UTTERANCE);
    }

    public CheckedUtterance(Name alias) {
        this(alias, CHECKED_UTTERANCE);
    }

    private CheckedUtterance(Name alias, Table<CheckedUtteranceRecord> aliased) {
        this(alias, aliased, null);
    }

    private CheckedUtterance(Name alias, Table<CheckedUtteranceRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> CheckedUtterance(Table<O> child, ForeignKey<O, CheckedUtteranceRecord> key) {
        super(child, key, CHECKED_UTTERANCE);
    }

    @Override
    public Schema getSchema() {
        return LabelingTool.LABELING_TOOL;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.CHECKED_UTTERANCE_PRIMARY, Indexes.CHECKED_UTTERANCE_USER_ID);
    }

    @Override
    public Identity<CheckedUtteranceRecord, Long> getIdentity() {
        return Keys.IDENTITY_CHECKED_UTTERANCE;
    }

    @Override
    public UniqueKey<CheckedUtteranceRecord> getPrimaryKey() {
        return Keys.KEY_CHECKED_UTTERANCE_PRIMARY;
    }

    @Override
    public List<UniqueKey<CheckedUtteranceRecord>> getKeys() {
        return Arrays.<UniqueKey<CheckedUtteranceRecord>>asList(Keys.KEY_CHECKED_UTTERANCE_PRIMARY);
    }

    @Override
    public List<ForeignKey<CheckedUtteranceRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<CheckedUtteranceRecord, ?>>asList(Keys.CHECKED_UTTERANCE_IBFK_1);
    }

    public User user() {
        return new User(this, Keys.CHECKED_UTTERANCE_IBFK_1);
    }

    @Override
    public CheckedUtterance as(String alias) {
        return new CheckedUtterance(DSL.name(alias), this);
    }

    @Override
    public CheckedUtterance as(Name alias) {
        return new CheckedUtterance(alias, this);
    }

    @Override
    public CheckedUtterance rename(String name) {
        return new CheckedUtterance(DSL.name(name), null);
    }

    @Override
    public CheckedUtterance rename(Name name) {
        return new CheckedUtterance(name, null);
    }
}
