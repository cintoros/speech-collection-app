/*
 * This file is generated by jOOQ.
 */
package ch.fhnw.speech_collection_app.jooq.tables;


import ch.fhnw.speech_collection_app.jooq.Indexes;
import ch.fhnw.speech_collection_app.jooq.Keys;
import ch.fhnw.speech_collection_app.jooq.SpeechCollectionApp;
import ch.fhnw.speech_collection_app.jooq.tables.records.TextAudioRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row12;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TextAudio extends TableImpl<TextAudioRecord> {

    private static final long serialVersionUID = -140653968;

    public static final TextAudio TEXT_AUDIO = new TextAudio();

    @Override
    public Class<TextAudioRecord> getRecordType() {
        return TextAudioRecord.class;
    }

    public final TableField<TextAudioRecord, Long> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    public final TableField<TextAudioRecord, Double> AUDIO_START = createField(DSL.name("audio_start"), org.jooq.impl.SQLDataType.FLOAT.nullable(false), this, "");

    public final TableField<TextAudioRecord, Double> AUDIO_END = createField(DSL.name("audio_end"), org.jooq.impl.SQLDataType.FLOAT.nullable(false), this, "");

    public final TableField<TextAudioRecord, String> TEXT = createField(DSL.name("text"), org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    public final TableField<TextAudioRecord, String> PATH_TO_FILE = createField(DSL.name("path_to_file"), org.jooq.impl.SQLDataType.VARCHAR(255).defaultValue(org.jooq.impl.DSL.inline("NULL", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    public final TableField<TextAudioRecord, Long> SPEAKER_ID = createField(DSL.name("speaker_id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    public final TableField<TextAudioRecord, Long> SOURCE_ID = createField(DSL.name("source_id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    public final TableField<TextAudioRecord, Long> WRONG = createField(DSL.name("wrong"), org.jooq.impl.SQLDataType.BIGINT.defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    public final TableField<TextAudioRecord, Long> CORRECT = createField(DSL.name("correct"), org.jooq.impl.SQLDataType.BIGINT.defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    public final TableField<TextAudioRecord, Timestamp> DELETED = createField(DSL.name("deleted"), org.jooq.impl.SQLDataType.TIMESTAMP.defaultValue(org.jooq.impl.DSL.inline("NULL", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    public final TableField<TextAudioRecord, Boolean> IS_SENTENCE_ERROR = createField(DSL.name("is_sentence_error"), org.jooq.impl.SQLDataType.BOOLEAN.defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.BOOLEAN)), this, "");

    public final TableField<TextAudioRecord, Boolean> IS_PRIVATE = createField(DSL.name("is_private"), org.jooq.impl.SQLDataType.BOOLEAN.defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.BOOLEAN)), this, "");

    public TextAudio() {
        this(DSL.name("text_audio"), null);
    }

    public TextAudio(String alias) {
        this(DSL.name(alias), TEXT_AUDIO);
    }

    public TextAudio(Name alias) {
        this(alias, TEXT_AUDIO);
    }

    private TextAudio(Name alias, Table<TextAudioRecord> aliased) {
        this(alias, aliased, null);
    }

    private TextAudio(Name alias, Table<TextAudioRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> TextAudio(Table<O> child, ForeignKey<O, TextAudioRecord> key) {
        super(child, key, TEXT_AUDIO);
    }

    @Override
    public Schema getSchema() {
        return SpeechCollectionApp.SPEECH_COLLECTION_APP;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.TEXT_AUDIO_PRIMARY, Indexes.TEXT_AUDIO_SOURCE_ID, Indexes.TEXT_AUDIO_SPEAKER_ID);
    }

    @Override
    public Identity<TextAudioRecord, Long> getIdentity() {
        return Keys.IDENTITY_TEXT_AUDIO;
    }

    @Override
    public UniqueKey<TextAudioRecord> getPrimaryKey() {
        return Keys.KEY_TEXT_AUDIO_PRIMARY;
    }

    @Override
    public List<UniqueKey<TextAudioRecord>> getKeys() {
        return Arrays.<UniqueKey<TextAudioRecord>>asList(Keys.KEY_TEXT_AUDIO_PRIMARY);
    }

    @Override
    public List<ForeignKey<TextAudioRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<TextAudioRecord, ?>>asList(Keys.TEXT_AUDIO_IBFK_1, Keys.TEXT_AUDIO_IBFK_2);
    }

    public Speaker speaker() {
        return new Speaker(this, Keys.TEXT_AUDIO_IBFK_1);
    }

    public Source source() {
        return new Source(this, Keys.TEXT_AUDIO_IBFK_2);
    }

    @Override
    public TextAudio as(String alias) {
        return new TextAudio(DSL.name(alias), this);
    }

    @Override
    public TextAudio as(Name alias) {
        return new TextAudio(alias, this);
    }

    @Override
    public TextAudio rename(String name) {
        return new TextAudio(DSL.name(name), null);
    }

    @Override
    public TextAudio rename(Name name) {
        return new TextAudio(name, null);
    }

    // -------------------------------------------------------------------------
    // Row12 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row12<Long, Double, Double, String, String, Long, Long, Long, Long, Timestamp, Boolean, Boolean> fieldsRow() {
        return (Row12) super.fieldsRow();
    }
}
